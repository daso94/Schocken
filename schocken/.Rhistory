seed <- 1234567
set.seed(seed)
eta0 <- 1
tc <- runif(n=n, min=0, max=20.80)                            # true latent (censored) failure/event times
tt <- as.vector(eta0 + eta)    # + rbeta(n, 1, 100) Hinzufügen von Zufallseffekten hat leider keine Veränderung gebracht # true latent (uncensored) failure/event times
stime <- pmin(tt, tc)                                         # observed latent failure/event times
status <- 1 * (tt <= tc)                                      # observed latent failure/event indicator
llv.cont.pos1 <- data.frame(stime, status, x)
summary(status)
#pos 2
# X1 + X2 + X1X2
beta <- c(rep(1,2), rep(0,p-2), 1)
covar <- cbind(x, "X1X2"=x[,1]*x[,2])
eta <- covar %*% beta                                         # regression function
seed <- 123456789
set.seed(seed)
lambda0 <- 1
lambda <- lambda0 * exp(eta - mean(eta))                      # hazards function
tt <- rexp(n=n, rate=lambda)                                  # true (uncensored) failure/event times
tc <- runif(n=n, min=0, max=3.9)                               # true (censored) failure/event times
stime <- pmin(tt, tc)                                         # observed failure/event times
status <- 1 * (tt <= tc)                                      # observed failure/event indicator
exp.cont.pos2 <- data.frame(stime, status, x)
summary(status)
seed <- 123456789
set.seed(seed)
eta0 <- 1
tt <- as.vector(eta0 + eta)                                   # true latent (uncensored) failure/event times
tc <- runif(n=n, min=0, max=33.8)                               # true latent (censored) failure/event times
stime <- pmin(tt, tc)                                         # observed latent failure/event times
status <- 1 * (tt <= tc)                                      # observed latent failure/event indicator
llv.cont.pos2 <- data.frame(stime, status, x)
summary(status)
#============================================================================================
vimp.int.mdms.llv.cont.pos1 <- rsf.int(X=llv.cont.pos1, ntree=ntree, method="imdms", splitrule="logrank",
importance="permute", B=1, ci=90,
parallel=F, conf=conf, verbose=FALSE, seed=seed)$vimp
int.cph.llv.cont.pos1 <- cph.int1(X=llv.cont.pos1)
int.cph.exp.cont.pos2 <- cph.int1(X=exp.cont.pos2)
int.cph.exp.cont.pos2
cph.int1 <- function (X) {
p <- ncol(X) - 2
fmla.int <- as.formula(paste("Surv(time=", colnames(X)[1], ", event=", colnames(X)[2], ", type=\"right\") ~ . + (.)^2 ", sep=""))
coxfit <- tryCatch({coxph(fmla.int, data=X, model=T, x=T, y=T)}, error=function(w){NULL}, warning=function(w){NULL})
if (is.null(coxfit)) {
P.cph.int <- NA
} else {
P.cph.int <- summary(coxfit)$coefficients
}
return(P.cph.int)
int.cph.exp.cont.pos2
)
cph.int1 <- function (X) {
p <- ncol(X) - 2
fmla.int <- as.formula(paste("Surv(time=", colnames(X)[1], ", event=", colnames(X)[2], ", type=\"right\") ~ . + (.)^2 ", sep=""))
coxfit <- tryCatch({coxph(fmla.int, data=X, model=T, x=T, y=T)}, error=function(w){NULL}, warning=function(w){NULL})
if (is.null(coxfit)) {
P.cph.int <- NA
} else {
P.cph.int <- summary(coxfit)$coefficients
}
return(P.cph.int)
}
int.cph.exp.cont.pos2 <- cph.int1(X=exp.cont.pos2)
int.cph.exp.cont.pos2
RSF
RSF
RSF_test
fit = survfit(Surv(time=TTA, event=EventA, type="right") ~ 1  + CCR5.SNP2, data = A)
library(IRSF)
library(CoxRidge)
library(survminer)
data("MACS", package="IRSF")
Zielgroesse_Aids = TRUE
if(Zielgroesse_Aids){
A <- MACS[,c("TTA","EventA","Race","Group3","DEFB.CNV3","CCR2.SNP","CCR5.SNP2","CCR5.ORF","CXCL12.SNP2")]
formula.A <- as.formula(Surv(time=TTA, event=EventA, type="right") ~ 1  + Race + Group3 + DEFB.CNV3 + CCR2.SNP + CCR5.SNP2 + CCR5.ORF + CXCL12.SNP2)
} else{
X <- MACS[,c("TTX","EventX","Race","Group3","DEFB.CNV3","CCR2.SNP","CCR5.SNP2","CCR5.ORF","CXCL12.SNP2")]
formula.X <- as.formula(Surv(time=TTX, event=EventX, type="right") ~ 1  + Race + Group3 + DEFB.CNV3 + CCR2.SNP + CCR5.SNP2 + CCR5.ORF + CXCL12.SNP2)
}
fit = survfit(Surv(time=TTA, event=EventA, type="right") ~ 1  + CCR5.SNP2, data = A)
ggsurvplot_facet(fit, data = A, facet.by = 'DEFB.CNV3', pval = T)
## CPH p-Werte signifikant:
fit = survfit(Surv(time=TTA, event=EventA, type="right") ~ 1  + DEFB.CNV3, data = A)
ggsurvplot_facet(fit, data = A, facet.by = 'CCR5.SNP2', pval = T)
RSF[,"conjunction"] = RSF[,"signif.1SE"]&RSF[,"signif.CI"]
cph = cph.int1(GBSG)
RSF[,"cph"] = cph[rownames(RSF),5]
cph
rownames(RSF)
cph = cph.int1(GBSG)[7:28,]
RSF[,"cph"] = cph[rownames(RSF),5]
cph
cph = cph.int1(GBSG)[9:28,]
RSF[,"cph"] = cph[rownames(RSF),5]
RSF
for(i in 1:length(RSF)){
if(strsplit(row.names(RSF)[i],":")[[1]][1] > strsplit(row.names(RSF)[i],":")[[1]][2]){
row.names(RSF)[i] = paste0(c(strsplit(row.names(RSF)[i],":")[[1]][2], strsplit(row.names(RSF)[i],":")[[1]][1]),collapse = ":")
}
}
cph = cph.int1(GBSG)[9:28,]
RSF[,"cph"] = cph[rownames(RSF),5]
RSF
row.names(RSF)
row.names(cph)
for(i in 1:length(cph)){
if(strsplit(row.names(cph)[i],":")[[1]][1] > strsplit(row.names(cph)[i],":")[[1]][2]){
row.names(cph)[i] = paste0(c(strsplit(row.names(cph)[i],":")[[1]][2], strsplit(row.names(cph)[i],":")[[1]][1]),collapse = ":")
}
}
i = 2
strsplit(row.names(cph)[i],":")[[1]][1] > strsplit(row.names(cph)[i],":")[[1]][2]
i = 3
strsplit(row.names(cph)[i],":")[[1]][1] > strsplit(row.names(cph)[i],":")[[1]][2]
for(i in 1:length(cph)){
print(i)
print(strsplit(row.names(cph)[i],":")[[1]][1] > strsplit(row.names(cph)[i],":")[[1]][2])
if(strsplit(row.names(cph)[i],":")[[1]][1] > strsplit(row.names(cph)[i],":")[[1]][2]){
row.names(cph)[i] = paste0(c(strsplit(row.names(cph)[i],":")[[1]][2], strsplit(row.names(cph)[i],":")[[1]][1]),collapse = ":")
}
}
length(cph)
dim(cph)
for(i in 1:dim(cph)[1]){
if(strsplit(row.names(cph)[i],":")[[1]][1] > strsplit(row.names(cph)[i],":")[[1]][2]){
row.names(cph)[i] = paste0(c(strsplit(row.names(cph)[i],":")[[1]][2], strsplit(row.names(cph)[i],":")[[1]][1]),collapse = ":")
}
}
RSF[,"cph"] = cph[rownames(RSF),5]
row.names(cph)
row.names(RSF)
intersect(row.names(RSF), row.names(cph))
cph
cph[rownames(RSF),]
cph = cph.int1(GBSG)
for(i in 1:dim(cph)[1]){
if(strsplit(row.names(cph)[i],":")[[1]][1] > strsplit(row.names(cph)[i],":")[[1]][2]){
row.names(cph)[i] = paste0(c(strsplit(row.names(cph)[i],":")[[1]][2], strsplit(row.names(cph)[i],":")[[1]][1]),collapse = ":")
}
}
cph
dim(cph)
cph = cph.int1(GBSG)[9:36,]
for(i in 1:dim(cph)[1]){
if(strsplit(row.names(cph)[i],":")[[1]][1] > strsplit(row.names(cph)[i],":")[[1]][2]){
row.names(cph)[i] = paste0(c(strsplit(row.names(cph)[i],":")[[1]][2], strsplit(row.names(cph)[i],":")[[1]][1]),collapse = ":")
}
}
RSF[,"cph"] = cph[rownames(RSF),5]
RSF
load("C:/Users/David.So/Google Drive/Studium/h-da/Seminar/.RData")
RSF
load("C:/Users/David.So/Google Drive/Studium/h-da/Seminar/Backup.RData")
RSF
RSF_test
RSF
RSF[RSF$conjunction]
RSF[RSF$conjunction,]
RSF
xtable(data.frame(formatC(RSF, format = "e", digits = 2)))
library(xtable)
xtable(data.frame(formatC(RSF, format = "e", digits = 2)))
xtable(data.frame(RSF))
xtable(data.frame(RSF[,1:11]))
GBSG
?GBSG
# Alphabetische Sortierung der Row.names zum Matchen mit p-Werten aus cph
for(i in 1:length(RSF)){
if(strsplit(row.names(RSF)[i],":")[[1]][1] > strsplit(row.names(RSF)[i],":")[[1]][2]){
row.names(RSF)[i] = paste0(c(strsplit(row.names(RSF)[i],":")[[1]][2], strsplit(row.names(RSF)[i],":")[[1]][1]),collapse = ":")
}
}
cph.int1 <- function (X) {
p <- ncol(X) - 2
fmla.int <- as.formula(paste("Surv(time=", colnames(X)[1], ", event=", colnames(X)[2], ", type=\"right\") ~ . + (.)^2 ", sep=""))
coxfit <- tryCatch({coxph(fmla.int, data=X, model=T, x=T, y=T)}, error=function(w){NULL}, warning=function(w){NULL})
if (is.null(coxfit)) {
P.cph.int <- NA
} else {
P.cph.int <- summary(coxfit)$coefficients
}
return(P.cph.int)
}
cph = cph.int1(GBSG)[9:36,]
# Alphabetische Sortierung der Row.names zum Matchen mit RSF-IMDMS Dataframe
for(i in 1:dim(cph)[1]){
if(strsplit(row.names(cph)[i],":")[[1]][1] > strsplit(row.names(cph)[i],":")[[1]][2]){
row.names(cph)[i] = paste0(c(strsplit(row.names(cph)[i],":")[[1]][2], strsplit(row.names(cph)[i],":")[[1]][1]),collapse = ":")
}
}
# Hinzufügen der p-Werte
RSF[,"cph"] = cph[rownames(RSF),5]
RSF
xtable(data.frame(RSF))
vimp.int.mdms.exp.cont.pos2
vimp.int.mdms.exp.cont.pos1
vimp.int.mdms.llv.cont.pos1
source('C:/Users/David.So/Google Drive/Studium/h-da/Seminar/Simulationsstudie.R', encoding = 'UTF-8')
source('C:/Users/David.So/Google Drive/Studium/h-da/Seminar/Simulationsstudie.R', encoding = 'UTF-8')
seed
vimp.int.mdms.llv.cont.pos1
vimp.int.mdms.llv.cont.pos2
vimp.int.mdms.exp.cont.pos1
vimp.int.mdms.exp.cont.pos2
source('C:/Users/David.So/Google Drive/Studium/h-da/Seminar/MACS_kaplan_meier_plots.R', encoding = 'UTF-8')
## TOP 3 IMDMS:
fit = survfit(Surv(time=TTA, event=EventA, type="right") ~ 1  + DEFB.CNV3, data = A)
ggsurvplot_facet(fit, data = A, facet.by = 'Group3', pval = T)
fit = survfit(Surv(time=TTA, event=EventA, type="right") ~ 1  + CCR2.SNP, data = A)
ggsurvplot_facet(fit, data = A, facet.by = 'Group3', pval = T)
fit = survfit(Surv(time=TTA, event=EventA, type="right") ~ 1  + Group3, data = A)
ggsurvplot_facet(fit, data = A, facet.by = 'CXCL12.SNP2', pval = T)
## CPH p-Werte signifikant:
fit = survfit(Surv(time=TTA, event=EventA, type="right") ~ 1  + DEFB.CNV3, data = A)
ggsurvplot_facet(fit, data = A, facet.by = 'CCR5.SNP2', pval = T)
fit = survfit(Surv(time=TTA, event=EventA, type="right") ~ 1  + CCR5.SNP2, data = A)
ggsurvplot_facet(fit, data = A, facet.by = 'DEFB.CNV3', pval = T)
fit = survfit(Surv(time=stime, event=status, type="right") ~ 1  + posnodal, data = GBSG_bin)
ggsurvplot(fit, data = GBSG_bin,  pval = T)
#==========================================================================================#
#Imports
#==========================================================================================#
if(!require(pacman)){ install.packages('pacman') }; library(pacman)
p_load(
parallel,
survival,
randomForestSRC,
abind,
xtable,
ggRandomForests,
ggplot2,
NADA,
MASS,
RColorBrewer)
install.packages("devtools")
library("devtools")
##### Bei dem folgenden Git handelt es sich um ein Fork des Gits von Dazard für das Orignal IRSF-Package,
##### erweitert um die Berechnung der VIMP
##### einzig relevante Veränderungen findet sich in /R/IRSF.internal.r Zeile 183-192 sowie 201
devtools::install_git(url = "https://code.fbi.h-da.de/stdasomm/seminar")
#==========================================================================================
# Erasing the random seed if it exists and set it up to the default one
#==========================================================================================
if (exists(".Random.seed")) rm(.Random.seed)
RNGkind(kind="L'Ecuyer-CMRG")
#=========================================================================================#
# Retrieving argument "type" passed from the command line
#=========================================================================================#
argv <- commandArgs(trailingOnly=TRUE)
#==========================================================================================#
# Constants
#==========================================================================================#
ntree <- 1000
seed <- 1234567
set.seed(seed)
n <- 200
p <- 5
continuous = TRUE
# Stetige oder diskrete Kovariaten
if(continuous){
x <- matrix(data=runif(n=n*p, min=1, max=5), nrow=n, ncol=p, byrow=FALSE, dimnames=list(1:n, paste("X", 1:p, sep="")))
} else{
x <- matrix(data=sample(1:5,n*p,replace = T), nrow=n, ncol=p, byrow=FALSE, dimnames=list(1:n, paste("X", 1:p, sep="")))
}
#Model #4
# X1X2
beta <- c(rep(0,p), 1)
covar <- cbind(x, "X1X2"=x[,1]*x[,2])
eta <- covar %*% beta                                         # regression function
seed <- 1234567
set.seed(seed)
lambda0 <- 1
lambda <- lambda0 * exp(eta - mean(eta))                      # hazards function
tt <- rexp(n=n, rate=lambda)                                  # true (uncensored) failure/event times
tc <- runif(n=n, min=0, max=3.33)                             # true (censored) failure/event times
stime <- pmin(tt, tc)                                         # observed failure/event times
status <- 1 * (tt <= tc)                                      # observed failure/event indicator
exp.cont.pos1 <- data.frame(stime, status, x)
summary(status)
seed <- 1234567
set.seed(seed)
eta0 <- 1
#### Hier wird der Störterm hinzugefügt
tt <- as.vector(eta0 + eta + rbeta(n, 1, 10))               # true latent (uncensored) failure/event times
tc <- runif(n=n, min=0, max=20.80)                            # true latent (censored) failure/event times
stime <- pmin(tt, tc)                                         # observed latent failure/event times
status <- 1 * (tt <= tc)                                      # observed latent failure/event indicator
llv.cont.pos1 <- data.frame(stime, status, x)
summary(status)
#Model #5
# X1 + X2 + X1X2
beta <- c(rep(1,2), rep(0,p-2), 1)
covar <- cbind(x, "X1X2"=x[,1]*x[,2])
eta <- covar %*% beta                                         # regression function
###### EXP ###################################################################################################
seed <- 123456789
set.seed(seed)
lambda0 <- 1
lambda <- lambda0 * exp(eta - mean(eta))                      # hazards function
tt <- rexp(n=n, rate=lambda)                                  # true (uncensored) failure/event times
tc <- runif(n=n, min=0, max=3.9)                               # true (censored) failure/event times
stime <- pmin(tt, tc)                                         # observed failure/event times
status <- 1 * (tt <= tc)                                      # observed failure/event indicator
exp.cont.pos2 <- data.frame(stime, status, x)
summary(status)
##### LLV ####################################################################################
seed <- 123456789
set.seed(seed)
eta0 <- 1
# Hier wird der Störterm hinzugefügt
tt <- as.vector(eta0 + eta + rbeta(n, 1, 10))                # true latent (uncensored) failure/event times
tc <- runif(n=n, min=0, max=33.8)                               # true latent (censored) failure/event times
stime <- pmin(tt, tc)                                         # observed latent failure/event times
status <- 1 * (tt <= tc)                                      # observed latent failure/event indicator
llv.cont.pos2 <- data.frame(stime, status, x)
summary(status)
cph.int1 <- function (X) {
p <- ncol(X) - 2
fmla.int <- as.formula(paste("Surv(time=", colnames(X)[1], ", event=", colnames(X)[2], ", type=\"right\") ~ . + (.)^2 ", sep=""))
coxfit <- tryCatch({coxph(fmla.int, data=X, model=T, x=T, y=T)}, error=function(w){NULL}, warning=function(w){NULL})
if (is.null(coxfit)) {
P.cph.int <- NA
} else {
P.cph.int <- summary(coxfit)$coefficients
}
return(P.cph.int)
}
print("Ergebnis der Cox-Regression im vollen Modell:")
print(cph.int1(X=llv.cont.pos1)[6:15,])
seed = 123456789
vimp.int.mdms.llv.cont.pos1 <- rsf.int(X=llv.cont.pos1, ntree=ntree, method="imdms", splitrule="logrank",
importance="permute", B=1, ci=90,
parallel=F, conf=conf, verbose=FALSE, seed=seed)$vimp
library("IRSF6") #das ist mein verändertes Package
vimp.int.mdms.llv.cont.pos1 <- rsf.int(X=llv.cont.pos1, ntree=ntree, method="imdms", splitrule="logrank",
importance="permute", B=1, ci=90,
parallel=F, conf=conf, verbose=FALSE, seed=seed)$vimp
imp.llv1 = data.frame(names = row.names(vimp.int.mdms.llv.cont.pos1),  diff = -1*vimp.int.mdms.llv.cont.pos1[,5], row.names = NULL)
ggplot(imp.llv1, aes(x=reorder(names, -diff), diff)) + geom_bar(stat="identity") +
ylab("-VIMP") + xlab("Variable") +
ggtitle("Variable Importance LLV #4")
library(CoxRidge)
library(survminer)
data("MACS", package="IRSF")
Zielgroesse_Aids = TRUE
if(Zielgroesse_Aids){
A <- MACS[,c("TTA","EventA","Race","Group3","DEFB.CNV3","CCR2.SNP","CCR5.SNP2","CCR5.ORF","CXCL12.SNP2")]
formula.A <- as.formula(Surv(time=TTA, event=EventA, type="right") ~ 1  + Race + Group3 + DEFB.CNV3 + CCR2.SNP + CCR5.SNP2 + CCR5.ORF + CXCL12.SNP2)
} else{
X <- MACS[,c("TTX","EventX","Race","Group3","DEFB.CNV3","CCR2.SNP","CCR5.SNP2","CCR5.ORF","CXCL12.SNP2")]
formula.X <- as.formula(Surv(time=TTX, event=EventX, type="right") ~ 1  + Race + Group3 + DEFB.CNV3 + CCR2.SNP + CCR5.SNP2 + CCR5.ORF + CXCL12.SNP2)
}
## TOP 3 IMDMS:
fit = survfit(Surv(time=TTA, event=EventA, type="right") ~ 1  + DEFB.CNV3, data = A)
ggsurvplot_facet(fit, data = A, facet.by = 'Group3', pval = T)
fit = survfit(Surv(time=TTA, event=EventA, type="right") ~ 1  + CCR2.SNP, data = A)
ggsurvplot_facet(fit, data = A, facet.by = 'Group3', pval = T)
devtools::install_github("phister/huwiwidown")
devtools::install_github("phister/huwiwidown")
install.packages(rlang)
remove.packages(rlang)
detach(package:rlang, unload = TRUE)
detach("package:rlang", unload = TRUE)
?detach
detach("rlang", unload = TRUE)
devtools::install_github("phister/huwiwidown")
devtools::install_github("phister/huwiwidown")
remove.packages(rlang)
remove.packages("rlang")
install.packages("rlang")
devtools::install_github("phister/huwiwidown")
install.packages(digest)
install.packages("digest")
install.packages("digest")
install.packages("digest")
devtools::install_github("phister/huwiwidown")
devtools::install_github("phister/huwiwidown")
if (!require(devtools)) {
install.packages("devtools", repos = "http://cran.rstudio.com")
}
if (!require(huwiwidown)) {
devtools::install_github("phister/huwiwidown")
library(huwiwidown)
}
install.packages("digest")
install.packages("digest")
install.packages("digest")
installr::updateR()
install.packages("digest")
devtools::install_github("phister/huwiwidown")
shiny::runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
View(covar)
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
shiny::runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp()
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
?runif
?runif
sample(1:10, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 3)
x1 = 'hallo'
parse(paste0("x","1"))
eval(paste0("x","1"))
eval(parse(paste0("x","1")))
eval(parse(text = paste0("x","1")))
not TRUE
!TRUE
?rep
rep(1, 5)
A = matrix(data = rep(7, 18))
A
A = matrix(data = rep(7, 18), col = 3)
?matrix
A = matrix(data = rep(7, 18), ncol = 3)
A
A[1,2]
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp()
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
rm(A)
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
A[1,2] =2
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
shiny::runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
runApp('C:/Users/David.So/Google Drive/Studium/diverse Projekte/Schocken/schocken')
